---
layout: post
status: publish
published: true
title: knn算法
author:
  display_name: y1275963
  login: y1275963
  email: 1275963@gmail.com
  url: ''
author_login: y1275963
author_email: 1275963@gmail.com
wordpress_id: 228
wordpress_url: http://y1275963.info/wordpress/?p=228
date: '2014-03-20 12:52:02 +0000'
date_gmt: '2014-03-20 04:52:02 +0000'
categories:
- Python
tags: []
comments:
- id: 11
  author: 明升M88开户
  author_email: 2291208847@qq.com
  author_url: http://www.xm58tc.com
  date: '2014-03-21 12:57:15 +0000'
  date_gmt: '2014-03-21 04:57:15 +0000'
  content: 看不懂啊
- id: 12
  author: y1275963
  author_email: 1275963@gmail.com
  author_url: ''
  date: '2014-03-21 21:57:24 +0000'
  date_gmt: '2014-03-21 13:57:24 +0000'
  content: "同学，看不懂是正常的。请拿笔把\r\nfor each point in our dataset:\r\n     calculate the
    distance between in x and the current point\r\n     sort the distance in increasing
    order\r\n     take the k items with lowest distances in x\r\n     find the majority
    class among these items\r\n     return the majority class as our perdition for
    the class in x\r\n抄一遍。如果您熟悉Machine Learning的话，你大概就知道了什么意思了。Knn很简单的。如果您实在不懂的话，可以把问题发给我（1275963@gmail.com）或者直接发到blog上，我看到后会回复您的。\r\n用中文的话：\r\n就是计算待分类点到样本点的欧式距离，看看它离哪一个比较近就把他划到哪（这个就涉及到那个k的定义了，就是多远才算近）\r\n真心有点基础一看就懂得，我写的时间长实在是因为python没学过，然后第一次用不知道怎么写更优雅一点"
---
<p>最近新入了本"Machine Learning in Action".非常欢喜。</p>
<p>这是knn算法的说明：</p>
<p><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--></p>
<div>for each point in our dataset:</div>
<div>     calculate the distance between in x and the current point</div>
<div>     sort the distance in increasing order</div>
<div>     take the k items with lowest distances in x</div>
<div>     find the majority class among these items</div>
<div>     return the majority class as our perdition for the class in x</div>
<div>我就说一句就明白了：</div>
<div>如果大家都去投票，最后肯定是谁的数目多谁就获胜。这个是近的人才又机会去给自己投票。</div>
<div></div>
<p>这是函数：</p>
<pre class="lang:python decode:true">def classify0(inx,dataset,labels,k):
    tk = dataset - inx
    tk = tk**2
    tk = tk.sum(axis = 1)
    sortdi = tk.argsort()
    classcount = {}
    print sortdi
    for i in range(k):
        votelabel = labels[sortdi[i]]
        print votelabel,i,sortdi[i]
        classcount[votelabel] = classcount.get(votelabel,0)+1
    sortedclass = sorted(classcount.iteritems(),key=operator.itemgetter(1),reverse=True)
    print sortedclass
      #  votelabel = lables(sortedindex[i])
    #return sortedind
g1,l1 = createDataSet()
print classify0([0.5,0.5],g1,l1,2)</pre>
<p>还是不太习惯python。写起来特别吃力。</p>
<ul>
<li>这里面的classcount.get()是字典的用法；</li>
<li>还有那个按照iteritem的sort</li>
<li>然后，tk.argsort()也是没怎么用过的。</li>
</ul>
<p>这是实践部分，我拿他来分类数字：</p>
<p>自己手工写的，知道一定特别挫，但最后按时给我弄出来了。最坑爹的是python中numpy数组不给你动态的。害的<span style="text-decoration: underline;">你爹爹</span>弄了半天：</p>
<p>上个牛逼的结果：</p>
<p>[video width="480" height="272" m4v="http://y1275963.info/wordpress/wp-content/uploads/2014/03/New-Project.m4v"][/video]</p>
<p>这是我写的数据处理部分：</p>
<pre class="lang:python decode:true">dir = '/Users/tk/py_knearest/testDigits'
# for i in os.listdir(dir):
test = numpy.zeros((946,1024))
labels = []
tk = -1
for i in os.listdir(dir):
    if i.endswith('.txt'):
        tk += 1
        fn = open(dir+'/'+i)
        cd = []
        for index,item in enumerate(fn):
            cd.extend(item)
        cd = filter(lambda x: x=='0' or x == '1',cd)
        test[tk] = cd
        labels.extend(i[0])</pre>
<p>大概意思就是写到一个叫做test的numpy.darray里面去。真心写了2个小时。但好在弄完了</p>
<p>这是写过230个错了30个。</p>
<pre class="lang:python decode:true">2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 1
2 2
2 2
2 2
2 2
2 9
2 2
2 1
2 2
2 2
2 2
2 2
2 2
2 3
2 2
2 6
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 1
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 8
2 7
2 7
2 3
2 2
2 2
2 8
2 8
2 2
2 2
2 2
2 2
2 2
2 2
2 8
2 2
2 2
2 2
2 6
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 0
3 3
3 3
3 3
3 9
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 2
3 2
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 8
3 1
3 3
3 3
3 2
3 3
3 5
3 8
3 3
3 7
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 9
3 7
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 7
3 3
3 3
3 3
3 5
3 3
3 3
3 3
3 3
3 3
3 3
3 3
3 3
4 4
4 4
4 4
4 4
4 6
4 4
4 7
4 4
4 4
4 4
4 1
4 4
4 4
4 1
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 5
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 1
4 1
4 4
4 4
4 4
4 4
4 1
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 7
4 4
4 4
4 4
4 4
4 0
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4</pre>
<p>&nbsp;</p>
